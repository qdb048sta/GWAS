-----------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\user\Documents\GitHub\GWAS\20210804_GWAS_on_lbody_height_change_TWB_sep.log
  log type:  text
 opened on:   5 Aug 2021, 15:45:45

. 
. clear all

. macro drop _all

. 
. // set working directory
. cd "C:\TWB_2021"
C:\TWB_2021

. 
. // set path for plink
. global plinkpath "C:\plink\plink.exe"

. global plink2path "C:\plink2\plink2.exe"

. global datatwb1 "C:\TWB_2021\TWB1_data\TWBR10810-06_TWB1"

. global datatwb2 "C:\TWB_2021\TWB2_data\TWBR10810-06_TWB2"

. local datafile "$datatwb2"

. foreach dataf of local datafile{
  2.     if "`dataf'"=="C:\TWB_2021\TWB1_data\TWBR10810-06_TWB1"{
  3.             global data "C:\TWB_2021\TWB1_data\TWBR10810-06_TWB1"
  4.                 cd "C:\TWB_2021\20210804_TWB1_gwas_result"
  5.         }
  6.         if "`dataf'"=="C:\TWB_2021\TWB2_data\TWBR10810-06_TWB2"{
  7.             global data "C:\TWB_2021\TWB2_data\TWBR10810-06_TWB2"
  8.                 cd "C:\TWB_2021\20210804_TWB2_gwas_result"
  9.         }
 10.         
. 
. 
. // set data path
. //global data "C:\TWB\combined_TWB1_TWB2\combined.TWB1.TWB2.high.confidence.v1"
. //global data "C:\\TWB_2021\\TWB1_imputation_data\\TWB1.liftOverTohg38.impu.v1"
. 
. 
. //global data_one_tenth "C:\TWB\combined_TWB1_TWB2\combined.TWB1.TWB2.high.confidence.v1_10"
. 
. 
. //global data "C:\TWB_2021\TWB1_imputation_data\TWB1.liftOverTohg38.impu.v1"
. //global data "C:\TWB_2021\TWB2_imputation_data\TWB2.hg38.impu.v1"
. 
. //global datatype "imputation"  /*"imputation" or "", skips QC steps 4 & 5 if enter "imputation"*/
. global datatype ""  /*"imputation" or "", skips QC steps 4 & 5 if enter "imputation"*/
 11. 
. global merged_survey "C:\TWB\twbiobank_merged_20210803"  
 12. /*編號00 do檔製造出來的問卷資料*/
. 
. global do01 "01_plink survey data input_20210803" /*編號01 do檔名稱/位置*/
 13. 
. 
. /*
> global merged_survey "C:\Data\TWBioBank\twbiobank_merged_20201109"  
> /*編號00 do檔製造出來的問卷資料*/
> 
> global do01 "C:\Data\TWBioBank\01_plink survey data input_20201208" /*編號01 do檔名稱/位置*/
> run "${do01}" /*select individuals*/
> */
. 
. // --------------------------------------------------------------------------------
. global filename = ""
 14. local loc = strpos("$data", "TWB1")
 15. if `loc'!=0{
 16.     global filename = "TWB1_"
 17. }
 18. local loc = strpos("$data", "TWB2")
 19. if `loc'!=0{
 20.     global filename = "TWB2_"
 21. }
 22. local loc = strpos("$data", "combined")
 23. if `loc'!=0{
 24.     global filename = "TWB1+2_"
 25. }
 26. 
. if "$datatype"=="imputation"{
 27.     global filename = "${filename}imp_"
 28. }
 29. //---------------------------------------------------------------------------------
. // start from certain step, options include "" and elements in `steps'
. global start_from "QC1_maf" /*if "", detects whether files exist and start from latest step*/
 30. 
. local steps = "QC1_maf QC2_miss QC3_bi QC4_sex QC5_chrom QC6_hwe QC7_het QC9_relate pca QC0_keep gwas clump prs recode"
 31. 
. global nstart_from .
 32. local ct 0
 33. foreach i of local steps{
 34.         local ++ct
 35.         if "`i'"=="${start_from}"{
 36.                 global nstart_from `ct' 
 37.         }
 38. }
 39. //---------------------------------------------------------------------------------
. // set QC thresholds
. global setmaf = 0.01      /*set minor allele frequency*/
 40. global setgeno = 0.05     /*set genotype missingness*/
 41. global setmind = 0.05     /*set individual missingness*/
 42. global setking = 0.066    /*set individual relatedness*/
 43.                                                   /*first-degree relations: 0.177; second-degree: 0.088; third-degree: 0
> .044; */
.                                                   /*between second & third: 0.066*/
. global setwindow = 500    /*set pruning window*/
 44. global setstep = 5        /*set pruning step size*/
 45. global setr2 = 0.2        /*set pruning R2*/
 46. global setclumpr2 = 0.5   /*set clumping R2*/
 47. global setclumpkb = 250   /*set clumping distance in kilobase*/
 48. 
. // set number of principal components
. global pcs 10
 49. 
. // set phenotypes
. //global phenos "eduyrs lbody_height BODY_HEIGHT BMI"
. global phenos "lbody_height"
 50. //global phenos "l_income_self"
. // global phenos "eduyrs"
. 
. // set significant levels (p-values) for clumping
. //global siglevel_list "0.00000005 0.000001 0.00001"
. //global siglevel_list "0.000001 0.000005"
. 
.  global siglevel_list "0.000001 0.00001"
 51. 
. // set sex
. global sex "_m _f _a" /*f for female, m for male, a for all*/
 52. // global sex "_a"
. 
. // set conditions
. global condition "AGE<=55"  /*if XXX, no need to enter sex, will generate 3 files (male, female, all)*/
 53. 
. // local list "FID IID SEX AGE birth_year BODY_HEIGHT BODY_WEIGHT lbody_height BMI eduyrs inc_self_mid inc_family_mid"
. global vars "`list'"
 54. global vars ""
 55. 
. //=====================================================================================
. 
.         /*
>         QC steps
>         */ 
.         global QC1 = "${filename}A_qc_01_maf"
 56.         global QC2 = "${filename}A_qc_02_missing"
 57.         global QC3 = "${filename}A_qc_03_biallelic"
 58.         global QC4 = "${filename}A_qc_04_sex"
 59.         global QC5 = "${filename}A_qc_05_chrom"
 60.         global QC6 = "${filename}A_qc_06_hwe"
 61.         global QC7 = "${filename}A_qc_07_het"
 62.         global freq = "${filename}A_qc_freq"
 63.         global QC9 = "${filename}A_qc_09_relatedness_done"
 64.         global QC10 = "${filename}A_qc_10_pruned"
 65.         global QC0 = "${filename}A_qc_00_keep"
 66. 
. 
.         // remove SNPs with MAF under threshold
. //      Minor allele frequencies/counts
. //      --maf filters out all variants with minor allele frequency below the provided threshold (default 0.01)
. //      https://www.cog-genomics.org/plink/1.9/filter#maf
.         
.         cap confirm file "${QC1}.bed"
 67.         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 1 & ${nstart_from}!=.) {
 68. 
.                 timer clear 1
 69.                 timer on 1
 70.                 //shell "$plink2path" --bfile "${data}" --thin-indiv 0.1 --make-bed --out "${data_one_tenth}"   //select
>  1/10
.                 shell "$plink2path" --bfile "${data}" --maf $setmaf --make-bed --out "${QC1}"   //filter out the data with 
> provided threshold
 71.                 
.                 
.                 timer off 1
 72.                 qui timer list 1
 73.                 local time1 = r(t1)/60
 74.                 di "qc 1 used `time1'  minutes"
 75.                 
.                 local stop 0 //this pattern repeat over times
 76.                 cap file close log
 77.                 file open log using "${QC1}.log", read 
 78.                 file read log line
 79.                 while r(eof)==0{
 80.                         file read log line
 81.                         local a =word(`"`line'"', 1)
 82.                         if "`a'" == "Error:"{
 83.                                 local stop 1
 84.                                 di `"`line'"'
 85.                         }
 86.                 }
 87.                 file close log
 88.                 
.                 if `stop'==1{
 89.                         error 1 /*force break*/
 90.                 }
 91. 
.         }
 92.         
.         // remove SNPs and individuals with genotype calls and genotype missingness less than thresholds
. //      Missing genotype rates
. //      --geno filters out all variants with missing call rates exceeding the provided value 
. //      (default 0.1) to be removed, while --mind does the same for samples.
. //      https://www.cog-genomics.org/plink/1.9/filter#missing
.         
.         cap confirm file "${QC2}.bed"
 93.         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 2 & ${nstart_from}!=.) {
 94. 
.                 timer clear 1
 95.                 timer on 1
 96.                 
.                 shell "$plink2path" --bfile "${QC1}" --geno $setgeno --mind $setmind --make-bed --out "${QC2}" //超過0.01 m
> issing 會被filter  --mind do the same thing
 97.                 
.                 timer off 1
 98.                 qui timer list 1
 99.                 local time1 = r(t1)/60
100.                 di "qc 2 used `time1'  minutes"
101.                 
.                 local stop 0 
102.                 cap file close log
103.                 file open log using "${QC2}.log", read 
104.                 file read log line
105.                 while r(eof)==0{
106.                         file read log line
107.                         local a =word(`"`line'"', 1)
108.                         if "`a'" == "Error:"{
109.                                 local stop 1
110.                                 di `"`line'"'   
111.                         }
112.                 }
113.                 file close log
114.                 
.                 if `stop'==1{
115.                         error 1 /*force break*/
116.                 }
117. 
.         }
118.         
.         // remove SNPs that are not biallelic (雙等位基因)
. //      By default, all variants are loaded; when more than one alternate allele is present,
. //      the reference allele and the most common alternate are tracked (ties broken in favor 
. //      of the lower-numbered allele) and the rest are coded as missing calls. To simply skip all
. //      variants where at least two alternate alleles are present in the dataset, use --biallelic-only.
. //      https://www.cog-genomics.org/plink/1.9/input#vcf_filter
. //      
. //      --snps-only excludes all variants with one or more multi-character allele codes. With 'just-acgt', 
. //      variants with single-character allele codes outside of {'A', 'C', 'G', 'T', 'a', 'c', 'g', 't', 
. //      <missing code>} are also excluded.
. //      https://www.cog-genomics.org/plink/1.9/filter#snps_only
.         
.         cap confirm file "${QC3}.bed"
119.         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 3 & ${nstart_from}!=.) {
120. 
.                 timer clear 1
121.                 timer on 1      
122.                 
. //              shell "$plinkpath" --bfile "${QC2}" --snps-only just-acgt --biallelic-only strict list --make-bed --out "${
> QC3}"        
.                 shell "$plink2path" --bfile "${QC2}" --snps-only just-acgt --max-alleles 2 --make-bed --out "${QC3}"    //
> 這些有male bed的都是filtering data
123.                 
.                 timer off 1
124.                 qui timer list 1
125.                 local time1 = r(t1)/60
126.                 di "qc 3 used `time1'  minutes"
127.                 
.                 local stop 0
128.                 cap file close log
129.                 file open log using "${QC3}.log", read 
130.                 file read log line
131.                 while r(eof)==0{
132.                         file read log line
133.                         local a =word(`"`line'"', 1)
134.                         if "`a'" == "Error:"{
135.                                 local stop 1
136.                                 di `"`line'"'   
137.                         }
138.                 }
139.                 file close log
140.                 
.                 if `stop'==1{
141.                         error 1 /*force break*/
142.                 }
143. 
.         }
144.         
.         local nextfile = "${QC3}"
145.         if "$datatype" != "imputation"{
146.                 cap confirm file "${QC4}.bed"
147.                 if (_rc & ${nstart_from}==.)| (${nstart_from}<= 4 & ${nstart_from}!=.) {
148. 
.                         // check if reported sex is the same as imputed sex from genetic data, remove individual if not
. //                      Sex imputation
. //                      --check-sex normally compares sex assignments in the input dataset with those
. //                      imputed from X chromosome inbreeding coefficients, and writes a report to plink.sexcheck.
. //                  https://www.cog-genomics.org/plink/1.9/basic_stats#check_sex
.                         
.                         timer clear 1
149.                         timer on 1      
150.                         
.                         shell "$plinkpath" --bfile "${QC3}" --check-sex --out "${QC4}"
151.                         
.                         local stop 0
152.                         cap file close log
153.                         file open log using "${QC4}.log", read 
154.                         file read log line
155.                         while r(eof)==0{
156.                                 file read log line
157.                                 local a =word(`"`line'"', 1)
158.                                 if "`a'" == "Error:"{
159.                                         local stop 1
160.                                         di `"`line'"'
161.                                 }
162.                         }
163.                         file close log
164.                         
.                         if `stop'==1{
165.                                 error 1 /*force break*/
166.                         }
167.                         
.                         qui import delimited "${QC4}.sexcheck", delimiter(whitespace, collapse) case(preserve) clear 
168.                         qui keep if STATUS == "PROBLEM"
169.                         qui keep FID IID
170.                         qui export delimited using "${QC4}.txt", nolab delimiter(tab) replace
171.                         /*gen 1/10 dataset
>                         clear
>                         qui import delimited "${QC3}", delimiter(whitespace, collapse) case(preserve) clear 
>                         qui sample 10
>                         qui export delimited using "${QC3}.txt", nolab delimiter(tab) replace
>                         */
.                         shell "$plink2path" --bfile "${QC3}" --remove "${QC4}.txt" --make-bed --out "${QC4}"
172.                         
.                         local stop 0
173.                         cap file close log
174.                         file open log using "${QC4}.log", read 
175.                         file read log line
176.                         while r(eof)==0{
177.                                 file read log line
178.                                 local a =word(`"`line'"', 1)
179.                                 if "`a'" == "Error:"{
180.                                         local stop 1
181.                                         di `"`line'"'
182.                                 }
183.                         }
184.                         file close log
185.                         
.                         if `stop'==1{
186.                                 error 1 /*force break*/
187.                         }
188. 
.                         timer off 1
189.                         qui timer list 1
190.                         local time1 = r(t1)/60
191.                         di "qc 4 used `time1'  minutes"
192.                         
.                 }
193.                 
.                 
.                 // keep chromosomes 1-22 only 
. //      Chromosomes
. //      --chr excludes all variants not on the listed chromosome(s). 
. //      Normally, valid choices for humans are 0 (i.e. unknown), 1-22, X, Y, XY 
. //      (pseudo-autosomal region of X; see --split-x/--merge-x), and MT.
. //      https://www.cog-genomics.org/plink/1.9/filter#chr
.         
.                 cap confirm file "${QC5}.bed"
194.                 if (_rc & ${nstart_from}==.)| (${nstart_from}<= 5 & ${nstart_from}!=.) {
195. 
.                         timer clear 1
196.                         timer on 1      
197.                         
.                         shell "$plink2path" --bfile "${QC4}" --chr 1-22 --make-bed --out "${QC5}"       //still filtering o
> ut stuff
198.                         
.                         timer off 1
199.                         qui timer list 1
200.                         local time1 = r(t1)/60
201.                         di "qc 5 used `time1'  minutes"
202.                 
.                         local stop 0
203.                         cap file close log
204.                         file open log using "${QC5}.log", read 
205.                         file read log line
206.                         while r(eof)==0{
207.                                 file read log line
208.                                 local a =word(`"`line'"', 1)
209.                                 if "`a'" == "Error:"{
210.                                         local stop 1
211.                                         di `"`line'"'   
212.                                 }
213.                         }
214.                         file close log
215.                         
.                         if `stop'==1{
216.                                 error 1 /*force break*/
217.                         }
218. 
.                 }
219.                 
.                 local nextfile = "${QC5}"
220.         }
221.         
.         
.         if "`nextfile'"=="${QC3}"{
222.                 di "qc 4 & 5 skipped"
223.         }
224.         
.         
.         // keep only SNPs that does not deviate from hardy-weinberg equilibrium 
. //      Hardy-Weinberg equilibrium tests 一個群體在理想情況（不受特定的干擾因素影響，如非隨機交配、天擇、族群遷移、突變或群
> 體大小有限）
. //，經過多個世代，基因頻率與基因型頻率會保持恆定並處於穩定的平衡狀態
. //      --hwe filters out all variants which have Hardy-Weinberg equilibrium exact 
. //      test p-value below the provided threshold.
. //  https://www.cog-genomics.org/plink/1.9/filter#hwe
.         
.         cap confirm file "${QC6}.bed"
225.         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 6 & ${nstart_from}!=.) {
226. 
.                 timer clear 1
227.                 timer on 1      
228.                 
.                 shell "$plink2path" --bfile "`nextfile'" --hwe 1e-6 --make-bed --out "${QC6}" //filter out data failed Hard
> y Weinberg test
229.                 
.                 timer off 1
230.                 qui timer list 1
231.                 local time1 = r(t1)/60
232.                 di "qc 6 used `time1'  minutes"
233.                 
.                 local stop 0
234.                 cap file close log
235.                 file open log using "${QC6}.log", read 
236.                 file read log line
237.                 while r(eof)==0{
238.                         file read log line
239.                         local a =word(`"`line'"', 1)
240.                         if "`a'" == "Error:"{
241.                                 local stop 1
242.                                 di `"`line'"'   
243.                         }
244.                 }
245.                 file close log
246.                 
.                 if `stop'==1{
247.                         error 1 /*force break*/
248.                 }
249. 
.         }
250. 
.         // exclude individuals with heterozygosity rates that are too high or too low   heterz
. //      Inbreeding
. //      --het computes observed and expected autosomal homozygous genotype counts 
. //      for each sample, and reports method-of-moments F coefficient estimates 
. //      (i.e. (<observed hom. count> - <expected count>) / (<total observations> - <expected count>)) to plink.het. 
. //  https://www.cog-genomics.org/plink/1.9/basic_stats#ibc
.         
.         cap confirm file "${QC7}.bed"
251.         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 7 & ${nstart_from}!=.) {
252. 
.                 timer clear 1
253.                 timer on 1      
254.                 
.                 shell "$plinkpath" --bfile "${QC6}" --missing --het --out "${QC7}"    //give report on missing sample and v
> ariant report
255.                 
.                 local stop 0
256.                 cap file close log
257.                 file open log using "${QC7}.log", read 
258.                 file read log line
259.                 while r(eof)==0{
260.                         file read log line
261.                         local a =word(`"`line'"', 1)
262.                         if "`a'" == "Error:"{
263.                                 local stop 1
264.                                 di `"`line'"'
265.                         }
266.                 }
267.                 file close log
268.                 
.                 if `stop'==1{
269.                         error 1 /*force break*/
270.                 }
271.                 
.                 qui import delimited "${QC7}.het", delimiter(whitespace, collapse) case(preserve) clear 
272.                 qui g het_rate = (NNM-OHOM)/NNM
273.                 qui sum het_rate
274.                 local mean = r(mean)
275.                 local std = r(sd)
276.                 local upper_bound = `mean' + 3*`std'
277.                 local lower_bound = `mean' - 3*`std'
278.                 qui keep if het_rate > `upper_bound' | het_rate < `lower_bound'
279.                 qui export delimited using "${QC7}.txt", nolab delimiter(tab) replace   
280.                 shell "$plink2path" --bfile "${QC6}" --remove "${QC7}.txt" --make-bed --out "${QC7}"
281.                 
.                 timer off 1
282.                 qui timer list 1
283.                 local time1 = r(t1)/60
284.                 di "qc 7 used `time1'  minutes"
285.                 
.                 local stop 0
286.                 cap file close log
287.                 file open log using "${QC7}.log", read 
288.                 file read log line
289.                 while r(eof)==0{
290.                         file read log line
291.                         local a =word(`"`line'"', 1)
292.                         if "`a'" == "Error:"{
293.                                 local stop 1
294.                                 di `"`line'"'
295.                         }
296.                 }
297.                 file close log
298.                 
.                 if `stop'==1{
299.                         error 1 /*force break*/
300.                 }
301. 
.         }
302.         
.         // kinship based pruning  
. //      --king-cutoff excludes one member of each pair of samples with kinship coefficient greater than the given threshold
. //      https://www.cog-genomics.org/plink/2.0/distance#king_coefs
. 
.         cap confirm file "${QC9}.bed"
303.         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 8 & ${nstart_from}!=.) {
304. 
.                 timer clear 1
305.                 timer on 1      
306.                 
.                 shell "$plink2path" --bfile "${QC7}" --king-cutoff $setking --make-bed --out "${QC9}"   //cut off the pair 
> that is too closed
307.                 
.                 timer off 1
308.                 qui timer list 1
309.                 local time1 = r(t1)/60
310.                 di "qc 9 used `time1'  minutes"
311.                 
.                 local stop 0
312.                 cap file close log
313.                 file open log using "${QC9}.log", read 
314.                 file read log line
315.                 while r(eof)==0{
316.                         file read log line
317.                         local a =word(`"`line'"', 1)
318.                         if "`a'" == "Error:"{
319.                                 local stop 1
320.                                 di `"`line'"'
321.                         }
322.                 }
323.                 file close log
324.                 
.                 if `stop'==1{
325.                         error 1 /*force break*/
326.                 }
327. 
.         }
328.                         
. //=========================================================================================================================
> ======               
.                 
.         //----------------------------------------------------------------------------------------------------  
.         
. foreach s of global sex{
329.         local ss `s'
330.         global keepfile = "C:\TWB_2021\02_twb1+2_input`ss'_30K_20210803.txt"
331.         
.         
.         /*
>         obtain principal components: using SNPs not in LD, obtain eigenvectors as the PCs
>         */ 
.         // LD:  連鎖不平衡性是指在兩個或者多個位點上的非隨機關聯性，這些位點既可能在同一條染色體上
. //      These commands produce a pruned subset of markers that are in approximate linkage equilibrium with each other, 
. //      writing the IDs to plink.prune.in (and the IDs of all excluded variants to plink.prune.out).
. //      --indep-pairwise is the simplest approach, which only considers correlations between unphased-hardcall 
. //      allele counts. It takes three parameters: a required window size in variant count or kilobase 
. //      (if the 'kb' modifier is present) units, an optional variant count to shift the window at the end of each 
. //      step (default 1, and now required to be 1 when a kilobase window is used), and a required r2 threshold. 
. //      At each step, pairs of variants in the current window with squared correlation greater than the threshold are 
. //      noted, and variants are greedily pruned from the window until no such pairs remain.
. //      https://www.cog-genomics.org/plink/2.0/ld#indep
. 
.         global name2 = "${filename}B_gwas`ss'_covar+`pcs'pc"
332.         cap confirm file "${name2}.txt"
333.         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 9 & ${nstart_from}!=.) {
334. 
.                 timer clear 1
335.                 timer on 1      
336. 
.                 shell "$plink2path" --bfile "${QC9}" --indep-pairwise $setwindow $setstep $setr2 --out "${QC10}"
337.                 
.                 local stop 0
338.                 cap file close log
339.                 file open log using "${QC10}.log", read 
340.                 file read log line
341.                 while r(eof)==0{
342.                         file read log line
343.                         local a =word(`"`line'"', 1)
344.                         if "`a'" == "Error:"{
345.                                 local stop 1
346.                                 di `"`line'"'   
347.                         }
348.                 }
349.                 file close log
350.                 
.                 if `stop'==1{
351.                         error 1 /*force break*/
352.                 }
353. 
.                 local pcs1 = ${pcs}-1
354.                 global pclist = ""
355.                 if ${pcs} !=0{
356.                         foreach i of numlist 1/`pcs1'{
357.                                 global pclist = "$pclist PC`i',"
358.                         }
359.                         global pclist = "$pclist PC${pcs}"
360.                 }
361.                 
. //      Population stratification
. //      --pca extracts top principal components from the variance-standardized relationship matrix (top 20 principle compon
> ents) 
. //      computed by --make-rel/--make-grm-{bin,list}.
. //  The 'approx' modifier causes the standard deterministic computation to be replaced 
. //  with the randomized algorithm originally implemented for Galinsky KJ, Bhatia G, Loh PR, 
. //  Georgiev S, Mukherjee S, Patterson NJ, Price AL (2016) Fast Principal-Component Analysis 
. //  Reveals Convergent Evolution of ADH1B in Europe and East Asia. This can be a good idea 
. //  when you have >5000 samples, and is almost required once you have >50000.
. //      https://www.cog-genomics.org/plink/2.0/strat#pca        
. 
. 
.                 global pc1 = "${filename}B`ss'_pcs_with_ibd_${pcs}"   
362.                 shell "$plink2path" --bfile "${QC9}" --extract "${QC10}.prune.in" --pca $pcs approx --out "$pc1"
363.                 
.                 local stop 0
364.                 cap file close log
365.                 file open log using "${pc1}.log", read 
366.                 file read log line
367.                 while r(eof)==0{
368.                         file read log line
369.                         local a =word(`"`line'"', 1)
370.                         if "`a'" == "Error:"{
371.                                 local stop 1
372.                                 di `"`line'"'   
373.                         }
374.                 }
375.                 file close log
376.                 
.                 if `stop'==1{
377.                         error 1 /*force break*/
378.                 }
379.                 
.                 if `stop'==1{
380.                         error 1 /*force break*/
381.                 }
382.                 
.                 qui import delimited "${pc1}.eigenvec", delimiter(whitespace, collapse) case(preserve) clear 
383.                 tempfile mergefile
384.                 qui save `mergefile'
385.                 
.                 
.                 qui import delimited "$keepfile", case(preserve) encoding(UTF-8) clear 
386.                 keep if $condition
387.                 
.                 if "$vars"!=""{
388.                     keep $vars
389.                 }
390.                 
.                 qui merge 1:1 IID using `mergefile', nogen keep(match)
391.                 qui export delimited using "${name2}.txt", nolab delimiter(tab) replace
392. 
.                 timer off 1
393.                 qui timer list 1
394.                 local time1 = r(t1)/60
395.                 di "calculate pc used `time1'  minutes"
396. 
.         }
397. 
. 
. //  QC0 
.         // keep only individuals with survey data 
. //      ID lists
. //      --keep accepts one or more space/tab-delimited text files with sample IDs, 
. //      and removes all unlisted samples from the current analysis; --remove does the same for all listed samples.
. //      --extract normally accepts one or more text file(s) with variant IDs (usually one per line, 
. //      but it's okay for them to just be separated by spaces), and removes all unlisted variants from the current analysis
> .
. //      https://www.cog-genomics.org/plink/1.9/filter#indiv
.         
.         
.         cap confirm file "${QC0}.bed"
398.         if (_rc & ${nstart_from}==.) | (${nstart_from}<= 10 & ${nstart_from}!=.) {
399. 
.                 timer clear 1
400.                 timer on 1
401.                 
.                 shell "$plink2path" --bfile "${QC9}" --keep "$keepfile" --make-bed --out "$QC0"
402.                 
.                 timer off 1
403.                 qui timer list 1
404.                 local time1 = r(t1)/60
405.                 di "qc 0 used `time1'  minutes"                 
406. 
.                 local stop 0
407.                 cap file close log
408.                 file open log using "${QC0}.log", read 
409.                 file read log line
410.                 while r(eof)==0{
411.                         file read log line
412.                         local a =word(`"`line'"', 1)
413.                         if "`a'" == "Error:"{
414.                                 local stop 1
415.                                 di `"`line'"'   
416.                         }
417.                 }
418.                 file close log
419.                 
.                 if `stop'==1{
420.                         error 1 /*force break*/
421.                 }
422.         }
423.         
.         
.         /*
>         run GWAS
>         */ 
. //      Regression with multiple covariates - Plink 1.9
. //      Given a quantitative phenotype and possibly some covariates (in a --covar file), 
. //      --linear writes a linear regression report to plink.assoc.linear. Similarly, 
. //      --logistic performs logistic regression given a case/control phenotype and some covariates.
. //      https://www.cog-genomics.org/plink/1.9/assoc#linear
. 
. //      Association analysis - Plink 2.0
. //      Linear and logistic/Firth regression with covariates
. //      --glm is PLINK 2.0's primary association analysis command.
. //      https://www.cog-genomics.org/plink/2.0/assoc#glm
.         
. //      Phenotype encoding
. //      --input-missing-phenotype <integer>
. //      --no-input-missing-phenotype
. //      Missing case/control or quantitative phenotypes are expected to be encoded as 
. //      'NA'/'nan' (any capitalization) or -9. (Other strings which don't start with a number 
. //      are now interpreted as categorical phenotype/covariate values.) You can change the 
. //      numeric missing phenotype code to another integer with --input-missing-phenotype, 
. //      or just disable -9 with --no-input-missing-phenotype.
. //  https://www.cog-genomics.org/plink/2.0/input#input_missing_phenotype
.         
. //      Covariates (other factors that might impact the phenotype)
. //      --covar designates the file to load covariates from. The file format is the same as for --pheno
. //      https://www.cog-genomics.org/plink/2.0/input#covar
. 
.         
.         foreach p of global phenos{
424.                 global name3 = "${filename}C_gwas`ss'_`p'_${pcs}pc"
425.                 global name4 = "${name3}_wo_covar"
426.                 
.                 cap confirm file "${name4}.txt"
427.                 if (_rc & ${nstart_from}==.)| (${nstart_from}<= 11 & ${nstart_from}!=.) {
428. 
.                         timer clear 1
429.                         timer on 1      
430. 
.                         
.                         global covars = "birth_year"
431.                         if "`s'"=="`_a'"{
432.                                 global covars = "birth_year, SEX"
433.                         }
434.                         
.                         if ${pcs}!=0{
435.                                 global covars = "${covars}, ${pclist}"
436.                         }       
437.                         
. //                      shell "$plink2path" --bfile "${QC0}" --pheno "${name2}.txt" --pheno-name `p' ///
. //                                      --covar "${name2}.txt" --covar-name $covars --prune --variance-standardize ///
. //                                      --linear intercept --out "${name3}"
. 
.                         shell "$plink2path" --bfile "${QC0}" --pheno "${name2}.txt" --pheno-name `p' ///
>                                         --covar "${name2}.txt" --covar-name $covars --variance-standardize ///
>                                         --linear intercept  --out "${name3}"
438.                                         
. //                      shell "$plinkpath" --bfile "${QC9}" --pheno "${name2}.txt" --pheno-name `p' ///
. //                                      --covar "${name2}.txt" --covar-name $covars --missing-phenotype -9 ///
. //                                      --linear intercept --out "${name3}"
. 
.                         timer off 1
439.                         qui timer list 1
440.                         local time1 = r(t1)/60
441.                         di "gwas `p' used `time1'  minutes"
442.                         
.                         local stop 0
443.                         cap file close log
444.                         file open log using "${name3}.log", read 
445.                         file read log line
446.                         while r(eof)==0{
447.                                 file read log line
448.                                 local a =word(`"`line'"', 1)
449.                                 if "`a'" == "Error:"{
450.                                         local stop 1
451.                                         di `"`line'"'   
452.                                 }
453.                         }
454.                         file close log
455.                         
.                         if `stop'==1{
456.                                 error 1 /*force break*/
457.                         }
458.                                         
.                         
.                         // select GWAS output file -- unknown extension other than .log, .png and .txt
.                         local file: dir . files "${name3}*"
459.                         global gwas_output ""
460.                         foreach f of local file{
461.                                 local pos = strrpos("`f'", ".")
462.                                 local ext = usubstr("`f'", `pos', .)
463.                                 if  !inlist("`ext'", ".log", ".png", ".txt") {
464.                                         global gwas_output "`f'"
465.                                 }
466.                         }
467.                         
.                         // keep betas for the SNPs only
.                         qui import delimited "$gwas_output", delimiter(whitespace, collapse) case(preserve) clear 
468.                         cap qui drop v*
469.                         qui keep if TEST=="ADD"
470.                         qui export delimited using "${name4}.txt", nolab delimiter(tab) replace
471. 
.                 }
472.                 
.                 
.                 /*
>                 manhattan plot
> 
>                 manhattan CHR BP P, title("`p'")                
>                 */ 
.                 
.                 
.                 /*
>                 clumping
>                 */ 
. //              LD-based result clumping
. //              When there are multiple significant association p-values in the same region, 
. //              LD should be taken into account when interpreting the results. 
. //              The --clump command is designed to help with this.
. //              --clump loads the named PLINK-format association report(s) 
. //              (text files with a header line, a column containing variant IDs, and another column containing p-values) 
. //              and groups results into LD-based clumps, writing a new report to plink.clumped.
. //              https://www.cog-genomics.org/plink/1.9/postproc#clump
.                 
.                 foreach sl of global siglevel_list{
473.                         local sig = "`sl'"
474.                         if "`sl'"=="0.000001"{
475.                                 local sig = "1e-6"
476.                         }
477.                         if "`sl'"=="0.00000005"{
478.                                 local sig = "5e-8"
479.                         }
480.                         if "`sl'"=="0.00001"{
481.                                 local sig = "1e-5"
482.                         }
483.                         if "`sl'"=="0.000005"{
484.                                 local sig = "1e-6"
485.                         }
486.                         
.                         global name7 = "${filename}D_gwas`ss'_clumped_`p'_pc${pcs}_sl`sig'"
487.                         global name8 = "${name7}_index_SNPs"
488.                         global check = "${name7}.clumped"
489. 
.                         cap confirm file "$check"
490.                         if (_rc & ${nstart_from}==.)| (${nstart_from}<= 12 & ${nstart_from}!=.) {
491. 
.                                 timer clear 1
492.                                 timer on 1      
493. 
.                                 //shell "$plinkpath" --bfile "${QC0}" --clump "${name4}.txt" --clump-snp-field ID /// (prob
> lems might come from here because of no --pheno)
.                                 //              --clump-p1 `sl' --clump-p2 `sl' --clump-r2 $setclumpr2 --clump-kb $setclump
> kb --out "${name7}"
.                                 shell "$plinkpath" --bfile "${QC0}" --clump "${name4}.txt" --clump-snp-field ID  ///
>                                                 --clump-p1 `sl' --clump-p2 `sl' --clump-r2 $setclumpr2 --clump-kb $setclump
> kb --out "${name7}"
494.                                                 
.                                 timer off 1
495.                                 qui timer list 1
496.                                 local time1 = r(t1)/60
497.                                 di "clump `ss' `p' `sig' used `time1'  minutes"
498.                                 
.                                 local stop 0
499.                                 cap file close log
500.                                 file open log using "${name7}.log", read 
501.                                 file read log line
502.                                 while r(eof)==0{
503.                                         file read log line
504.                                         local a =word(`"`line'"', 1)
505.                                         if "`a'" == "Error:"{
506.                                                 local stop 1
507.                                                 di `"`line'"'   
508.                                         }
509.                                 }
510.                                 file close log
511.                                 
.                                 if `stop'==1{
512.                                         error 1 /*force break*/
513.                                 }
514. 
.                         }               
515.                                                                 
.                         capture confirm file "$check"
516.                         if _rc{
517.                                 di "    no significant SNP for `p' GWAS p<`sig'"
518.                         }
519. 
.                         if !_rc{
520.                                 global name9 = "${filename}E_prs`ss'_`p'_pc${pcs}_sl`sig'"
521.                                 capture confirm file "${name9}.profile"
522.                                 if (_rc & ${nstart_from}==.)| (${nstart_from}<= 13 & ${nstart_from}!=.) {
523.                 
.                                         /*
>                                         calculate PRS with SNPs with p-values under threshold
>                                         */
. //                                      additive effect estimates for a quantitative trait
. //                                      The --score flag performs this function, writing results to plink.profile
. //                                      The input file should have one line per scored variant. By default, the variant ID 
> is read from column 1, 
. //                                      an allele code is read from the following column, and the score associated with the
>  named allele is read 
. //                                      from the column after the allele column; you can change these positions by passing 
> column numbers to --score.
. //                                      e.g. --score my.scores 2 4 9
. //                                      reads variant IDs from column 3, allele codes from column 2, and scores from column
>  1.
. //                                      https://www.cog-genomics.org/plink/1.9/score
.                                         
.                                         timer clear 1
524.                                         timer on 1      
525. 
.                                         qui import delimited "$check", delimiter(whitespace, collapse) case(preserve) clear
>  
526.                                         qui keep SNP
527.                                         qui export delimited using "${name8}.txt", nolab delimiter(tab) replace
528.                                         //shell "$plinkpath" --bfile "${QC0}" --score "${name4}.txt" 3 6 9 header  ///
.                                         //              --extract "${name8}.txt" --out "${name9}" this one does not have ph
> eno
.                                         shell "$plinkpath" --bfile "${QC0}" --score "${name4}.txt" 3 6 9 header  ///
>                                                         --extract "${name8}.txt" --out "${name9}"
529. //                                      shell "$plinkpath" --bfile "${QC0}" --score "${name4}.txt" 2 4 9 header  ///
. //                                                      --extract "${name8}.txt" --out "${name9}"                          
>                              
.                                         timer off 1
530.                                         qui timer list 1
531.                                         local time1 = r(t1)/60
532.                                         di "calculate prs `ss' `p' `sig' used `time1'  minutes"
533.                                         
.                                         local stop 0
534.                                         cap file close log
535.                                         file open log using "${name9}.log", read 
536.                                         file read log line
537.                                         while r(eof)==0{
538.                                                 file read log line
539.                                                 local a =word(`"`line'"', 1)
540.                                                 if "`a'" == "Error:"{
541.                                                         local stop 1
542.                                                         di `"`line'"'
543.                                                 }
544.                                         }
545.                                         file close log
546.                                         
.                                         if `stop'==1{
547.                                                 error 1 /*force break*/
548.                                         }
549. 
.                                 }               
550.                                 
.                                 /*
>                                 recode file: calculate number of reference alleles for index SNPs for individuals with surv
> ey data
>                                 */
. //                              --recode creates a new text fileset, after applying sample/variant filters and other operat
> ions.
. //                              By default, A1 alleles are counted; this can be customized with --recode-allele. 
. //                              --recode-allele's input file should have variant IDs in the first column and allele IDs in 
> the second.
. //                              https://www.cog-genomics.org/plink/1.9/data#recode
.                                 
.                                 global name10 = "${filename}F_gwas`ss'_`p'_pc${pcs}_sl`sig'_recoded"                       
>                      
551.                                 capture confirm file "${name10}.raw"
552.                                 if (_rc & ${nstart_from}==.)| (${nstart_from}<= 14 & ${nstart_from}!=.) {
553. 
.                                         timer clear 1
554.                                         timer on 1      
555. 
.                                         qui import delimited "${name4}.txt", case(preserve) clear 
556.                                         
.                                         cap rename ID SNP
557.                                         qui keep SNP A1
558.                                         qui export delimited using "${name4}_SNP+A_only.txt", nolab delimiter(tab) repla
> ce
559.                                         
.                                         //shell "$plinkpath" --bfile "${QC0}" --extract "${name8}.txt" ///
.                                         //              --recode A tab --recode-allele "${name4}_SNP+A_only.txt" ///
.                                         //              --output-missing-genotype N --out "${name10}"
.                                         //shell "$plinkpath" --bfile "${QC0}" --extract "${name8}.txt" ///
.                                         //              --recode A tab --recode-allele "${name4}_SNP+A_only.txt" ///
.                                         //              --output-missing-genotype N --out "${name10}"
.                                         shell "$plinkpath" --bfile "${QC0}" --extract "${name8}.txt" ///
>                                                         --recode A tab --recode-allele "${name4}_SNP+A_only.txt" ///
>                                                         --output-missing-genotype N --out "${name10}"
560.                                                         
.                                         // merge to original data 
.                                         /*import delimited "$keepfile", case(preserve) encoding(UTF-8) clear
>                                         save "${keepfile}_dta.dta",replace
>                                         import delimited "${name10}.raw",delimiter(whitespace, collapse) case(preserve) cle
> ar
>                                         merge 1:1 IID FID using "${keepfile}_dta.dta"
>                                         save "${name10}_dta_file.dta",replace*/
. 
.                                         //
.                                                         
.                                         timer off 1
561.                                         qui timer list 1
562.                                         local time1 = r(t1)/60
563.                                         di "recode data `ss' `p' `sig' used `time1'  minutes"
564.                                         
.                                         local stop 0
565.                                         cap file close log
566.                                         file open log using "${name10}.log", read 
567.                                         file read log line
568.                                         while r(eof)==0{
569.                                                 file read log line
570.                                                 local a =word(`"`line'"', 1)
571.                                                 if "`a'" == "Error:"{
572.                                                         local stop 1
573.                                                         di `"`line'"'   
574.                                                 }
575.                                         }
576.                                         file close log
577.                                         
.                                         if `stop'==1{
578.                                                 error 1 /*force break*/
579.                                         }
580. 
.                                 }
581. 
.                         }/*file exist*/
582.                         
.                 }/*sl*/         
583.                 di "--------------------------------"
584.         }/*pheno*/
585.         di "========================================="
586. }/*sex*/
587. }
C:\TWB_2021\20210804_TWB2_gwas_result
qc 1 used 22.77888333333333  minutes
qc 2 used 5.561916666666666  minutes
qc 3 used 3.5177  minutes
qc 4 used 5.984316666666667  minutes
qc 5 used 3.582366666666667  minutes
--Break--
r(1);

end of do-file

--Break--
r(1);

. exit, clear
